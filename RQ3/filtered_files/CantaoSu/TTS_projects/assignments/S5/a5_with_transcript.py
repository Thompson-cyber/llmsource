import os
from gtts import gTTS
from pydub import AudioSegment
from gtts.tokenizer import pre_processors
import gtts.tokenizer.symbols

# A dialogue between two friends generated by ChatGPT on the topic of food
transcript = """
Friend 1: Hey! Have you ever tried something called Spaghetti Squirgle?
Friend 2: Spaghetti Squirgle? No, I haven't! But it sounds intriguing. Is it anything like the Whimsical Waffles I tried last week?
Friend 1: Oh, I've heard of those! They're nothing like Spaghetti Squirgle, though. Squirgle is more like noodles mixed with a surprising twist of squishy marshmallows and spicy sauce.
Friend 2: That's wild! Speaking of strange food, I had this dish called Moonlight Mushrooms yesterday.
Friend 1: Moonlight Mushrooms? Tell me more!
Friend 2: They're basically mushrooms that have been marinated in a special sauce made of moonberries and then grilled to perfection. They have a unique, almost luminous quality to them.
Friend 1: Wow, that does sound amazing. I've been meaning to try the Galactic Gumbo as well. Heard it's out of this world!
Friend 2: Oh yes, I've tried that! The blend of alien veggies and star spices really gives it a cosmic kick.
"""
# Add custom pairs to the default substitution list
gtts.tokenizer.symbols.SUB_PAIRS.extend([
    ('Spaghetti Squirgle', 'Sunlit Spaghetti'),
    ('Whimsical Waffles','Wonderful Waffles'),
    ('Moonlight Mushrooms','Mystic Mushrooms'),
    ('Galactic Gumbo','Starry Stew')
])

# Apply substitutions to the transcript
transcript = pre_processors.word_sub(transcript)

# Split the transcript into utterances
utterances = transcript.strip().split('\n')

# Directory to save audio files
audio_dir = 'audio_files/'
os.makedirs(audio_dir, exist_ok=True)

# Iteratie over utterances and generate audio
for i, utterance in enumerate(utterances):
    speaker, text = utterance.split(':', 1)
    
    if "Friend 1" in speaker:
        lang = "en"
        tld = "co.in"  # Indian English
    else:
        lang = "en"
        tld = "us"  # American English
    
    # Create TTS object
    tts = gTTS(text.strip(), lang=lang, tld=tld)
    
    # Save audio file
    outputfile = os.path.join(audio_dir, f"utterance_{i+1}.mp3")
    tts.save(outputfile)

# Prepare all audio files in a sorted way
audio_dir = 'audio_files/'
audio_files = sorted([f for f in os.listdir(audio_dir) if f.endswith('.mp3')])

# Initialize an empty audio segment
combined = AudioSegment.empty()

# Loop through all files and append them to the combined audio
for file in audio_files:
    audio_path = os.path.join(audio_dir, file)
    audio = AudioSegment.from_mp3(audio_path)
    combined += audio

# Export the combined audio file
combined.export("combined_dialogue.mp3", format="mp3")

# Initialize an empty stereo audio segment
combined_stereo = AudioSegment.empty()

# Loop through all files and pan them accordingly
for i, file in enumerate(audio_files):
    audio_path = os.path.join(audio_dir, file)
    audio = AudioSegment.from_mp3(audio_path)
    
    # Make the audio stereo with one speaker in one channel
    if i % 2 == 0:  # Assuming even indexes are Friend 1
        pan_audio = audio.pan(-1)  # Pan left for Friend 1
    else:
        pan_audio = audio.pan(1)   # Pan right for Friend 2
        
    combined_stereo += pan_audio

# Export the combined audio file
combined_stereo.export("combined_phone_conversation.mp3", format="mp3")
