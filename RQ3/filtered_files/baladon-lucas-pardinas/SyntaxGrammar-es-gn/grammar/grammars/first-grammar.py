### Generated by ChatGPT
### Arguments are the verb and noun lexicon csv files

import csv
import sys
from nltk.grammar import FeatureGrammar

def read_arguments():
    if len(sys.argv) > 2:
        return sys.argv[1], sys.argv[2]
    else:
        raise Exception("Not enough arguments were provided")

[verb_lexicon, noun_lexicon] = read_arguments()

grammar_file = open('output.txt', 'w')

grammar_file.write('% start S\n\n')
grammar_file.write('# Grammar Rules\n\n')
grammar_file.write('S -> N[AGR=?a] V[AGR=?a]\n\n')
grammar_file.write("# ###################")
grammar_file.write("# Lexical Rules\n\n")


# Load verb lexical rules from CSV
with open(verb_lexicon, newline='', encoding='utf-8') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        word = row[1]
        tense = row[6]
        person = row[7]
        number = row[8]
        grammar_file.write(f"\nV[AGR=[NUM={number}, PER={person.upper()}, TENSE={tense.upper()}]] -> '{word}'")

# Load noun lexical rules from CSV
with open(noun_lexicon, newline='', encoding='utf-8') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        word = row[1]
        gender = row[5]
        number = row[6]
        grammar_file.write(f"\nN[AGR=[GEN={gender.upper()}, NUM={number.upper()}, PER={'3'}]] -> '{word}'")

grammar_file.close()
#gram = FeatureGrammar.fromstring(grammar)

# print(gram)      