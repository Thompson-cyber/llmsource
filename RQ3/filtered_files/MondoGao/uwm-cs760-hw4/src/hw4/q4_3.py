from hw4.nn_torch import Net
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms


# generated by chatGPT, not working
def main():
    net = Net(784, 30, 10)
    # Load the MNIST dataset
    train_dataset = datasets.MNIST(
        root="./data/mnist", train=True, transform=transforms.ToTensor(), download=True
    )
    test_dataset = datasets.MNIST(
        root="./data/mnist", train=False, transform=transforms.ToTensor(), download=True
    )

    # Define the loss function and optimizer
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.01)

    # Train the network
    train_loader = torch.utils.data.DataLoader(
        train_dataset, batch_size=64, shuffle=True
    )
    for epoch in range(10):
        for i, (inputs, labels) in enumerate(train_loader):
            optimizer.zero_grad()
            outputs = net(inputs.view(-1, 784))
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

    # Evaluate the network on the test dataset
    test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=1000)
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in test_loader:
            outputs = net(inputs.view(-1, 784))
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print(
        "Accuracy of the network on the 10000 test images: %d %%"
        % (100 * correct / total)
    )


if __name__ == "__main__":
    main()
