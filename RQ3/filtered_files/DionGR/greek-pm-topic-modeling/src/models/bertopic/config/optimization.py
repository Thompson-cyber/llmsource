from sklearn.decomposition import PCA, TruncatedSVD
from bertopic.dimensionality import BaseDimensionalityReduction
from umap import UMAP
from hdbscan import HDBSCAN
import itertools


""" Dimensionality Reduction Configurations """
umap_configs = {
        "n_components": [5, 10, 15, 20, 30],
        "n_neighbors": [5, 10, 15, 20],
        "min_dist": [0.05, 0.1, 0.2]
}  

pca_configs = {
        "n_components": [15, 20, 50]
}

tsvd_configs = {
        "n_components": [150]
}

basic_configs = {
}

""" Clustering Configurations """

hdbscan_configs = {
        "min_cluster_size": [7, 10, 15, 20],
        "metric": ["euclidean"],
        "prediction_data": [False]
    }

""" Algorithm Dictionary """

algos_dict = {
    "UMAP": UMAP,
    "PCA": PCA,
    "TSVD": TruncatedSVD,
    "HDBSCAN": HDBSCAN,
    "BASIC": BaseDimensionalityReduction
    }

""" Algorithm Configurations """

""" 
WARNING!
This function has been generated by ChatGPT using gpt-4-turbo, 
after being prompted to generate a function that creates aggregations of 
all possible combinations of configurations for dimensionality reduction and clustering.
"""
def all_config_combinations():
    # Prepare model configurations
    dim_reduction_configs = {
        "UMAP": umap_configs,
        "PCA": pca_configs,
        "TSVD": tsvd_configs,
        "BASIC": basic_configs
    }

    clustering_configs = {
        "HDBSCAN": hdbscan_configs,
    }

    # Build the search space list
    search_space = []
    
    for dim_red_model, dim_red_params in dim_reduction_configs.items():
        for clustering_model, clustering_params in clustering_configs.items():
            # Get all combinations of parameters for dimensionality reduction and clustering
            dim_red_combinations = list(itertools.product(*dim_red_params.values()))
            clustering_combinations = list(itertools.product(*clustering_params.values()))

            # Build dictionary for each combination
            for dim_red_comb in dim_red_combinations:
                for clustering_comb in clustering_combinations:
                    config_dict = {
                        "dim_reduction_model": dim_red_model,
                        "dim_reduction_params": {},
                        "clustering_model": clustering_model,
                        "clustering_params": {}
                    }
                    
                    # Fill in dimension reduction parameters
                    for i, key in enumerate(dim_red_params.keys()):
                        config_dict["dim_reduction_params"][key] = dim_red_comb[i]
                    
                    # Fill in clustering parameters
                    for i, key in enumerate(clustering_params.keys()):
                        config_dict["clustering_params"][key] = clustering_comb[i]

                    search_space.append(config_dict)
    
    return search_space